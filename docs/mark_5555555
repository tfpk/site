0: Login form displayed when clicking the login button | 
0: User can attempt to login by entering credentials | 
0: Registration form displayed when clicking the register / signup button | 
0: User can attempt to signup as a new user by entering new user credentials | 
0: Appropriate instructions, text, links or buttons to guide users | 
0: Feed of default content displayed | 
0: Feed is in reverse-chronological order | 
0: Pages have common and somewhat distinctive look-and-feel (may be ugly) | 
0: Posts display all relevant information (who posted it, time, upvotes etc.) | 
0: Reasonable feedback given on failed login attempt | 
0: Reasonable feedback given on failed signup attempt | 
1: If a user is not logged in, they are able to view the public posts | 
1: An existing user is able to be logged in | 
1: Login form rejects a login attempt with incorrect / missing credentials | 
1: Once the user is logged in, they are given a feed containing posts made by users that they follow | 
1: A user is able to register a new account given a valid set of credentials | 
1: An attempt to register a user where there are invalid credentials or conflicting usernames results in a failed registration attempt | 
1: Does not rely on refreshing the page to submit registration / login credentials | 
2: A logged in user is able to view all users that have upvoted a particular post | 
2: A logged in user is able to view all the comments made on a post | 
2: A logged in user is able to upvote a post that appears on their feed | 
2: A logged in user is able to remove an upvote that they made on a post that appears on their feed | 
2: A logged in user is able to create a post that contains only text and submit it | 
2: A logged in user is able to create a post that contains both text and an image and submit it | 
2: The post feed is paginated and a user is able to cycle through these groups of posts in reverse-chronological order | 
2: A logged in user can see their own profile information such as their username, number of posts and number of upvotes across all posts | 
3: Users can infinitely scroll through results | 
3: Users can write comments on posts and submit them | 
3: Posts likes and comments are immediately updated without refresh | 
3: Users can update their personal profile including email address and password | 
3: Clicking on a user's name/picture shows a page for that user | 
3: A user can follow another user they do not already follow | 
3: A user can unfollow another user they currently follow | 
3: A count of followers shown on their user page | 
3: Users can delete their own posts | 
3: Users can update/edit their own posts | 
3: Users can search for a post made by another user that they follow | 
3: [BONUS] Individual post page live updates comments/likes when made by other users (or feeds live updates without detriment to responsiveness) | 
4: Users can view posts made by users that they follow that are made to a specific subseddit | 
4: User interface looks good, is performant, makes logical sense, and is usable | 
4: Users can receive push notifications when a user they follow posts an image | 
4: Offline access is possible via web workers | 
4: Fragment based URL routing can be used to navigate to specific pages | 
4: [BONUS] Buffer post requests and send once internet reconnects | 
4: [BONUS] Users do push notification's via browser predicates if available rather than using DOM updates or alerts | 
4: [BONUS] The search functionality lets you search for posts by 2 or more of the following fields [author, subseddit, time] in addition to searching the post description text | 
4: [BONUS] Advanced extra feature #1 - must confirm with andrewt | 
4: [BONUS] Advanced extra feature #2 - must confirm with andrewt | 
4: [BONUS] Advanced extra feature #3 - must confirm with andrewt | 
Code - generally well-presented & readable | 
Code - good header comment & good comments preceding functions/important code | 
Code - consistantly indented | 
Code - good choice of variable & function names | 
Code - structured well, eg with functions | 
Code - single index.html, minimal HTML written, little or no use of innerHTML | 
How was student's code run? (answers other than A may involve mark penalties - check with andrewt if in doubt)  | 
